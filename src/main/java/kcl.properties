# https://github.com/awslabs/amazon-kinesis-client/blob/master/src/main/java/com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.java#L37
# https://github.com/awslabs/amazon-kinesis-client/blob/master/src/main/java/com/amazonaws/services/kinesis/clientlibrary/lib/worker/KinesisClientLibConfiguration.java

# three properties must be provided. 1) "applicationName" 2) "streamName" 3) "AWSCredentialsProvider"
# (applicationName, streamName, provider, providerDynamoDB, providerCloudWatch, workerId) are set in KinesisClientLibConfigurator constructor.
# Other properties are set in withProperty() method in KinesisClientLibConfigurator.

# [REQUIRED]The name of an Amazon Kinesis stream to process.
streamName = newstream

# [REQUIRED]Used by the KCL as the name of this application. Will be used as the name
# of an Amazon DynamoDB table which will store the lease and checkpoint
# information for workers with this application name
applicationName = KCLWithPropertiesFile

# [REQUIRED]Users can change the credentials provider the KCL will use to retrieve credentials.
# The DefaultAWSCredentialsProviderChain checks several other providers, which is
# described here:
# http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html
AWSCredentialsProvider = DefaultAWSCredentialsProviderChain
#AWSCredentialsProviderDynamoDB
#AWSCredentialsProviderCloudWatch

# The KCL defaults to us-east-1
regionName = us-east-1

# A worker id that uniquely identifies this worker among all workers using the same applicationName
# If this isn't provided KinesisClientLibConfigurator will assign a unique workerId to itself.
# https://github.com/awslabs/amazon-kinesis-client/blob/5c497d87a958068e3616c742d3762ae0fad64969/src/main/java/com/amazonaws/services/kinesis/clientlibrary/config/KinesisClientLibConfigurator.java#L142
# The default value is workerId = UUID.randomUUID().toString();
#workerId =

# Name of the lease table in DynamoDB.
# (selfnote)If it does not exist, KCL will create DDB table automatically.
#tableName =  

# Kinesis endpoint
#kinesisEndpoint = 

# DynamoDB endpoint
#dynamoDBEndpoint

# Valid options at TRIM_HORIZON or LATEST. 
# (selfnote) AT_TIMESTAMP cannot be set by using this prop. java.lang.reflect.InvocationTargetException will occur in KinesisClientLibConfiguration.withInitialPositionInStream()
#            AT_TIMESTAMP can be set by using withTimestampAtInitialPositionInStream(Date timestamp). If 
# See http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#API_GetShardIterator_RequestSyntax
# DEFAULT_INITIAL_POSITION_IN_STREAM = InitialPositionInStream.LATEST;
# initialPositionInStream = LATEST

# The timestamp to use with the AT_TIMESTAMP value for initialPositionInStream.
# (selfnote) cannot be used. No method for decoding parameters of type class java.util.Date (2018/01/08).
# timestampAtInitialPositionInStream = 2018-01-01T14:58:46.480

# Fail over time in milliseconds. A worker which does not renew it's lease within this time interval
# will be regarded as having problems and it's shards will be assigned to other workers.
# For applications that have a large number of shards, this msy be set to a higher number to reduce
# the number of DynamoDB IOPS required for tracking leases
# DEFAULT_FAILOVER_TIME_MILLIS = 10000L;
#failoverTimeMillis = 10000

# Time between tasks to sync leases and Kinesis shards. Shard sync interval in milliseconds - e.g. wait for this long between shard sync tasks.
# DEFAULT_SHARD_SYNC_INTERVAL_MILLIS = 60000L;
#shardSyncIntervalMillis = 60000

# Max records to fetch from Kinesis in a single GetRecords call.
# DEFAULT_MAX_RECORDS = 10000;
#maxRecords = 10000

# Controls how long the KCL will sleep if no records are returned from Kinesis.
# This value is only used when no records are returned; if records are returned, the com.amazonaws.services.kinesis.clientlibrary.lib.worker.ProcessTask will
# immediately retrieve the next set of records after the call to com.amazonaws.services.kinesis.clientlibrary.interfaces.v2.IRecordProcessor#processRecords(ProcessRecordsInput)
# has returned. Setting this value to high may result in the KCL being unable to catch up. If you are changing this
# value it's recommended that you enable withCallProcessRecordsEvenForEmptyRecordList(boolean), and monitor how far behind the records retrieved are by inspecting
# com.amazonaws.services.kinesis.clientlibrary.types.ProcessRecordsInput#getMillisBehindLatest(), and the CloudWatch Metric: GetRecords.MillisBehindLatest
# DEFAULT_IDLETIME_BETWEEN_READS_MILLIS = 1000L;
#idleTimeBetweenReadsInMillis = 1000

# Call the RecordProcessor::processRecords() API even if GetRecords returned an empty record list.
# Enables applications flush/checkpoint (if they have some data "in progress", but don't get new data for while)
# DEFAULT_DONT_CALL_PROCESS_RECORDS_FOR_EMPTY_RECORD_LIST = false;
callProcessRecordsEvenForEmptyRecordList = true

# Wait for this long between polls to check if parent shards are done.
# Interval in milliseconds between polling to check for parent shard completion.
# Polling frequently will take up more DynamoDB IOPS (when there are leases for shards waiting on completion of parent shards).
# DEFAULT_PARENT_SHARD_POLL_INTERVAL_MILLIS = 10000L;
#parentShardPollIntervalMillis = 10000

# Cleanup leases upon shards completion (don't wait until they expire in Kinesis).
# Keeping leases takes some tracking/resources (e.g. they need to be renewed, assigned), so by default we try to delete the ones we don't need any longer.
# DEFAULT_CLEANUP_LEASES_UPON_SHARDS_COMPLETION = true;
#cleanupLeasesUponShardCompletion = true

# Ignore child shards with open parents.
# (selfnote) cannot be used. There was no appropriately named method for setting property ignoreUnexpectedChildShards. (2018/01/08).
# ignoreUnexpectedChildShards = false

# Common client configuration used by Kinesis/DynamoDB/CloudWatch client
# (selfnote) cannot be used. The property commonClientConfig is not supported as type class com.amazonaws.ClientConfiguration at this time. (2018/01/08).
# commonClientConfig = 

# Client configuration used by Kinesis client
# (selfnote) cannot be used. The property kinesisClientConfig is not supported as type class com.amazonaws.ClientConfiguration at this time. (2018/01/08).
#kinesisClientConfig =

# Client configuration used by DynamoDB client
# (selfnote) cannot be used. The property dynamoDBClientConfig is not supported as type class com.amazonaws.ClientConfiguration at this time. (2018/01/08).
#dynamoDBClientConfig =

# Client configuration used by CloudWatch client
# (selfnote) cannot be used. The property cloudWatchClientConfig is not supported as type class com.amazonaws.ClientConfiguration at this time. (2018/01/08).
#cloudWatchClientConfig = 

# Override the default user agent (default is application name).
# For example. User-Agent: MyUserAgent,amazon-kinesis-client-library-java-1.8.8, aws-sdk-java/1.11.155 Windows_10/10.0 Java_HotSpot(TM)_64-Bit_Server_VM/25.65-b01/1.8.0_65
#userAgent = MyUserAgent

# Backoff time in milliseconds for Amazon Kinesis Client Library tasks (in the event of failures).
# DEFAULT_TASK_BACKOFF_TIME_MILLIS = 500L;
#taskBackoffTimeMillis = 500

# Buffer metrics for at most this long before publishing to CloudWatch.
# DEFAULT_METRICS_BUFFER_TIME_MILLIS = 10000L;
#metricsBufferTimeMillis = 10000

# Buffer at most this many metrics before publishing to CloudWatch.
# DEFAULT_METRICS_MAX_QUEUE_SIZE = 10000;
#metricsMaxQueueSize = 10000

# Metrics level to enable.
# (selfnote) cannot be used. No method for decoding parameters of type class com.amazonaws.services.kinesis.metrics.interfaces.MetricsLevel. (2018/01/08).
# DEFAULT_METRICS_LEVEL = MetricsLevel.DETAILED;
#metricsLevel = DETAILED

# Sets the dimensions that are allowed to be emitted in metrics.
# DEFAULT_METRICS_ENABLED_DIMENSIONS = ImmutableSet.<String>builder().addAll(METRICS_ALWAYS_ENABLED_DIMENSIONS).add(MetricsHelper.SHARD_ID_DIMENSION_NAME).build();
# (selfnote) how to specify?? 
#metricsEnabledDimensions = 

# KCL will validate client provided sequence numbers with a call to Amazon Kinesis before checkpointing for calls
# to RecordProcessorCheckpointer#checkpoint(String) by default.
# DEFAULT_VALIDATE_SEQUENCE_NUMBER_BEFORE_CHECKPOINTING = true;
#validateSequenceNumberBeforeCheckpointing = true

# If set to true, the Worker will not sync shards and leases during initialization if there are one or more leases
# in the lease table. This assumes that the shards and leases are in-sync.
# This enables customers to choose faster startup times (e.g. during incremental deployments of an application).
# If set to true "Skipping shard sync per config setting (and lease table is not empty)" will be logged.
# DEFAULT_SKIP_SHARD_SYNC_AT_STARTUP_IF_LEASES_EXIST = false;
#skipShardSyncAtStartupIfLeasesExist = false

# The size of the thread pool to create for the lease renewer to use.
# Worker will not acquire more than the specified max number of leases even if there are more
# shards that need to be processed. This can be used in scenarios where a worker is resource constrained or
# to prevent lease thrashing when small number of workers pick up all leases for small amount of time during deployment.
# Note that setting a low value may cause data loss (e.g. if there aren't enough Workers to make progress on all
# shards). When setting the value for this property, one must ensure enough workers are present to process
# shards and should consider future resharding, child shards that may be blocked on parent shards, some workers
# becoming unhealthy, etc.
# DEFAULT_MAX_LEASES_FOR_WORKER = Integer.MAX_VALUE;
#maxLeasesForWorker = 2147483647

# Max leases to steal from another worker at one time (for load balancing).
# Setting this to a higher number can allow for faster load convergence (e.g. during deployments, cold starts),
# but can cause higher churn in the system.
# DEFAULT_MAX_LEASES_TO_STEAL_AT_ONE_TIME = 1;
#maxLeasesToStealAtOneTime = 1

# The Amazon DynamoDB table used for tracking leases will be provisioned with this read capacity.
# DEFAULT_INITIAL_LEASE_TABLE_READ_CAPACITY = 10;
# initialLeaseTableReadCapacity = 10

# The Amazon DynamoDB table used for tracking leases will be provisioned with this write capacity.
# DEFAULT_INITIAL_LEASE_TABLE_WRITE_CAPACITY = 10;
# initialLeaseTableWriteCapacity = 10

# Implementation of ShardPrioritization interface that should be used during processing.
# (selfnote) cannot be used. There was no appropriately named method for setting property shardPrioritization. (2018/01/08).
# shardPrioritization = NoOpShardPrioritization

# Sets the size of the thread pool that will be used to renew leases.
# Setting this to low may starve the lease renewal process, and cause the worker to lose leases at a higher rate.
# DEFAULT_MAX_LEASE_RENEWAL_THREADS = 20;
#maxLeaseRenewalThreads = 30

# The time in seconds to wait before the worker retries to get a record.
# retryGetRecordsInSeconds = Optional.empty();
# Release 1.8.2 or later.
# https://github.com/awslabs/amazon-kinesis-client/commit/244da44d297c0dc026db813e1099bfceb5d43b17#diff-f4fb8c7bcf93e919fd5f6baad1a22806R1125
#retryGetRecordsInSeconds = 10

# The max number of threads in the getRecords thread pool.
# maxGetRecordsThreadPool = Optional.empty();
# Release 1.8.2 or later.
# https://github.com/awslabs/amazon-kinesis-client/commit/244da44d297c0dc026db813e1099bfceb5d43b17#diff-f4fb8c7bcf93e919fd5f6baad1a22806R1135
#maxGetRecordsThreadPool = 10

# The max number of ProcessRecordsInput that can be stored in the cache before blocking.
# Release 1.8.6 or later. Default = 3
#maxPendingProcessRecordsInput = 3

# Max byte size for the cache at any given point of time. After this threshold is crossed
# the KinesisDataFetcher will be blocked until the cache has more space available.
# Release 1.8.6 or later. Default = 8 MiB
#maxCacheByteSize = 8388608

# The strategy for fetching data from kinesis.DEFAULT or PREFETCH_CACHED
# Release 1.8.6 or later. Default = DEFAULT
# https://github.com/awslabs/amazon-kinesis-client/blob/master/src/main/java/com/amazonaws/services/kinesis/clientlibrary/lib/worker/DataFetchingStrategy.java
# Sample logs when using PREFETCH_CACHED: [prefetch-cache-shardId-000000000000-0000] DEBUG com.amazonaws.services.kinesis.clientlibrary.lib.worker.PrefetchGetRecordsCache -  Current Prefetch Counter States: { Requests: 2, Records: 0, Bytes: 0 }
#dataFetchingStrategy = DEFAULT

# The maximum number of records in the cache, accross all ProcessRecordInput objects.
# Release 1.8.6 or later. Default = 30000 
#maxRecordsCount = 30000

# The timeout in seconds to wait for the MultiLangProtocol to wait for.
# If the record processor doesn't respond within the timeout the parent Java process will be terminated. 
# This is a temporary fix to handle cases where the KCL becomes blocked while waiting for a client record processor. 
# The timeout for the this can be set by adding timeoutInSeconds = <timeout value>. The default for this is no timeout.
# Release 1.8.1 or later.
# timeoutInSeconds = Optional.empty();
#timeoutInSeconds = 10

# This adds support for setting the timeout that the Java process will wait for the MutliLang client to complete graceful shutdown. 
# The timeout can be configured by adding shutdownGraceMillis to the properties file set to the number of milliseconds to wait.
# Release 1.8.2 or later.
# DEFAULT_SHUTDOWN_GRACE_MILLIS = 5000L;
#shutdownGraceMillis = 5000

# Idle time between 2 getcalls from the data fetcher.
# Release 1.8.6 or later. Default = 1500 (ms)
#idleMillisBetweenCalls = 1500

# Logs warn message if as task is held in  a task for more than the set time.
# Release 1.8.8 or later. Default =	Not set
#logWarningForTaskAfterMillis = 1000

